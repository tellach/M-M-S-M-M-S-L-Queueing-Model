{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import sys\n",
    "\n",
    "def geometric_sum(start, end, x):\n",
    "    if x == 1: return end - start + 1\n",
    "    return x ** start * (1 - x ** (end - start + 1)) / (1 - x)\n",
    "\n",
    "class MMS:\n",
    "    def __init__(self,tauxArrivee,tauxService,s):\n",
    "        self.s=s\n",
    "        self.tauxArrivee=tauxArrivee\n",
    "        self.tauxService=tauxService\n",
    "        self.u=tauxArrivee/tauxService\n",
    "        self.rho=self.u/s\n",
    "        \n",
    "        #verification de la condition de stabilite du systeme\n",
    "        \n",
    "        if self.rho >= 1.0:\n",
    "            print(\"le systeme n'est pas stable (le regime stationnaire n'existe pas)\")\n",
    "            exit(-1)\n",
    "            \n",
    "        #calcul de p0 \n",
    "        res = 0.0\n",
    "        for k in range(0,s):\n",
    "            res += math.pow(self.u,k) / math.factorial(k)\n",
    "         \n",
    "        res += (self.s * math.pow(self.u,s))/(math.factorial(s) * (s - self.u))\n",
    "        self.p0 = 1/res\n",
    "        \n",
    "    # PK\n",
    "    def pk(self, k):\n",
    "        if k <= self.s:\n",
    "            return (math.pow(self.u,k) / math.factorial(k)) * self.p0\n",
    "        else:\n",
    "            return (math.pow(self.u,k) / (math.factorial(k) * math.pow(self.s,k-self.s))) * self.p0\n",
    "    \n",
    "    # Nf\n",
    "    def Nf(self):\n",
    "        return self.p0 * math.pow(self.u,self.s) * self.rho / math.factorial(self.s) / math.pow((1 - self.rho), 2)\n",
    "    \n",
    "    # Ns\n",
    "    def Ns(self):\n",
    "        return self.Nf() + self.tauxArrivee / self.tauxService\n",
    "\n",
    "    # Tf\n",
    "    def Tf(self):\n",
    "        return self.Nf() / self.tauxArrivee\n",
    "    \n",
    "    # Ts\n",
    "    def Ts(self):\n",
    "        return self.Ns() / self.tauxArrivee\n",
    "\n",
    "\n",
    "class MMSL:\n",
    "    def __init__(self,tauxArrivee,tauxService,s,capacite):\n",
    "        self.s=s\n",
    "        self.tauxArrivee=tauxArrivee\n",
    "        self.tauxService=tauxService\n",
    "        self.u=tauxArrivee/tauxService\n",
    "        self.rho=self.u/s\n",
    "        self.capacite = capacite\n",
    "\n",
    "        \n",
    "        #verification de la condition de stabilite du systeme\n",
    "        \n",
    "        if self.rho >= 1.0:\n",
    "            print(\"le systeme n'est pas stable (le regime stationnaire n'existe pas)\")\n",
    "            exit(-1)\n",
    "            \n",
    "        #calcul de p0 \n",
    "        res = 0.0\n",
    "        for k in range(0,s):\n",
    "            res += math.pow(self.u,k) / math.factorial(k)\n",
    "         \n",
    "        res += (self.u ** s / math.factorial(s)) * geometric_sum(0, capacite - s, self.u / s)\n",
    "        self.p0 = 1/res\n",
    "        \n",
    "    # PK\n",
    "    def pk(self, k):\n",
    "        if k == 0: return self.p0\n",
    "        if k > self.capacite: return 0\n",
    "        if k <= self.s: return math.pow(self.u,k) * self.p0 / math.factorial(k)\n",
    "        return math.pow(self.u , k) * self.p0 / math.factorial(self.s) / (math.pow(self.s , (k - self.s)))\n",
    "    \n",
    "    # Nf\n",
    "    def Nf(self):\n",
    "        if self.u == self.s:\n",
    "            return self.p0 * self.s ** self.s * (self.capacite - self.s) * (self.capacite - self.s + 1) / 2 / math.factorial(self.s)\n",
    "        else:\n",
    "            return self.p0 * self.u ** self.s * self.rho * (1 - self.rho ** (self.capacite - self.s + 1) - (1 - self.rho) * (self.capacite - self.s + 1) * self.rho ** (self.capacite - self.s)) / math.factorial(self.s) / (1 - self.rho) / (1 - self.rho)\n",
    "    \n",
    "    # Ns\n",
    "    def Ns(self):\n",
    "        return self.Nf() + (self.tauxArrivee * (1 - self.pk(self.capacite))) / self.tauxService\n",
    "\n",
    "    # Tf\n",
    "    def Tf(self):\n",
    "        return self.Nf() / self.tauxArrivee\n",
    "    \n",
    "    # Ts\n",
    "    def Ts(self):\n",
    "        return self.Ns() / self.tauxArrivee\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "systeme MMS\n",
      "P0 =  0.1111111111111111\n",
      "nf =  0.8888888888888886\n",
      "ns =  2.8888888888888884\n",
      "tf =  0.1481481481481481\n",
      "ts =  0.4814814814814814\n",
      "systeme MMSL\n",
      "P0 =  0.04494382077349861\n",
      "nf =  3.511234740264137\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "'MMSL' object has no attribute 'taux_sortie'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-193-79f1ea39f213>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     11\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"P0 = \"\u001b[0m \u001b[1;33m,\u001b[0m \u001b[0mtest1\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpk\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     12\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"nf = \"\u001b[0m \u001b[1;33m,\u001b[0m \u001b[0mtest1\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mNf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 13\u001b[1;33m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"ns = \"\u001b[0m \u001b[1;33m,\u001b[0m \u001b[0mtest1\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mNs\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     14\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"tf = \"\u001b[0m \u001b[1;33m,\u001b[0m \u001b[0mtest1\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mTf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     15\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"ts = \"\u001b[0m \u001b[1;33m,\u001b[0m \u001b[0mtest1\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mTs\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-192-fd5c67c46e48>\u001b[0m in \u001b[0;36mNs\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     92\u001b[0m     \u001b[1;31m# Ns\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     93\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mNs\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 94\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mNf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m+\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtauxArrivee\u001b[0m \u001b[1;33m*\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;36m1\u001b[0m \u001b[1;33m-\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpk\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcapacite\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m/\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtaux_sortie\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     95\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     96\u001b[0m     \u001b[1;31m# Tf\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'MMSL' object has no attribute 'taux_sortie'"
     ]
    }
   ],
   "source": [
    "print(\"systeme MMS\")\n",
    "test = MMS(6,3,3)\n",
    "print(\"P0 = \" , test.pk(0))\n",
    "print(\"nf = \" , test.Nf())\n",
    "print(\"ns = \" , test.Ns())\n",
    "print(\"tf = \" , test.Tf())\n",
    "print(\"ts = \" , test.Ts())\n",
    "#-----------------------------#\n",
    "print(\"systeme MMSL\")\n",
    "test1 = MMSL(10.0,4.0,3,100)\n",
    "print(\"P0 = \" , test1.pk(0))\n",
    "print(\"nf = \" , test1.Nf())\n",
    "print(\"ns = \" , test1.Ns())\n",
    "print(\"tf = \" , test1.Tf())\n",
    "print(\"ts = \" , test1.Ts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
